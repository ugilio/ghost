/*
 * Copyright (c) 2017 Giulio Bernardi (https://github.com/ugilio/).
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * generated by Xtext 2.12.0
 */
package com.github.ugilio.ghost.tests

import com.google.inject.Inject
import com.github.ugilio.ghost.ghost.Ghost
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*
import org.eclipse.xtext.EcoreUtil2
import com.github.ugilio.ghost.ghost.Interval
import com.github.ugilio.ghost.conversion.IntervalHelper

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostNumberConverterTest{

	@Inject
	ParseHelper<Ghost> parseHelper
	
	@Inject extension IntervalHelper intvHelper;
	
	@Test
	def void testToValueNoSign() {
		val result = parseHelper.parse('''
type test = int 100;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(100L));
	}
	
	@Test
	def void testToValuePositive() {
		val result = parseHelper.parse('''
type test = int +100;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(100L));
	}
	
	@Test
	def void testToValueNegative() {
		val result = parseHelper.parse('''
type test = int -100;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(-100L));
	}
	
	@Test
	def void testToValueZero() {
		val result = parseHelper.parse('''
type test = int 0;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(0L));
	}
	
	@Test
	def void testToValuePositiveZero() {
		val result = parseHelper.parse('''
type test = int +0;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(0L));
	}
	
	@Test
	def void testToValueNegativeZero() {
		val result = parseHelper.parse('''
type test = int -0;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(0L));
	}
	
	@Test
	def void testToValueInfinity() {
		val result = parseHelper.parse('''
type test = int INF;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(Long.MAX_VALUE));
	}
	
	@Test
	def void testToValuePositiveInfinity() {
		val result = parseHelper.parse('''
type test = int +INF;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(Long.MAX_VALUE));
	}
	
	@Test
	def void testToValueNegativeInfinity() {
		val result = parseHelper.parse('''
type test = int -INF;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(Long.MIN_VALUE));
	}
	
	@Test
	def void testToValueSpaceSign() {
		val result = parseHelper.parse('''
type test = int - 100;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(-100L));
	}
	
	@Test
	def void testToValuePositiveInfinitySpace() {
		val result = parseHelper.parse('''
type test = int + INF;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(Long.MAX_VALUE));
	}
	
	@Test
	def void testToValueNegativeInfinitySpace() {
		val result = parseHelper.parse('''
type test = int - INF;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(Long.MIN_VALUE));
	}

	@Test
	def void testToValueSeparator() {
		val result = parseHelper.parse('''
type test = int 100_000;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val value = intv.lbub();
		assertThat(value,is(100000L));
	}
}
