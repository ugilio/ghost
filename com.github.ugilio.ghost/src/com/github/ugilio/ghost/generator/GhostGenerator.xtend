/*
 * Copyright (c) 2017 Giulio Bernardi (https://github.com/ugilio/).
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * generated by Xtext 2.12.0
 */
package com.github.ugilio.ghost.generator

import com.google.inject.Inject
import com.github.ugilio.ghost.ghost.Ghost
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GhostGenerator extends AbstractGenerator {
	@Inject
	DdlProducer generator;
	
	private def String getBaseFileName(Resource res) {
		return res.URI.trimFileExtension.lastSegment();
	}
	
	private def String getOutFileName(Resource res) {
		return res.URI.trimFileExtension.appendFileExtension("ddl").lastSegment();
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//Cannot compile if there are errors
		if (resource.errors.size()>0)
			return;

		val ghost = resource.contents.get(0) as Ghost;
		val baseName = getBaseFileName(resource);

		val String output = generator.doGenerate(ghost,baseName);
		
		val outName = getOutFileName(resource);
		fsa.generateFile(outName, output);
	}
}
