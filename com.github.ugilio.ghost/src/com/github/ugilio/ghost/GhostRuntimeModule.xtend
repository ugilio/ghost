/*
 * Copyright (c) 2017 Giulio Bernardi (https://github.com/ugilio/).
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * generated by Xtext 2.12.0
 */
package com.github.ugilio.ghost

import com.github.ugilio.ghost.naming.GhostQualifiedNameProvider
import com.google.inject.Binder
import org.eclipse.xtext.scoping.IScopeProvider
import com.google.inject.name.Names
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import com.github.ugilio.ghost.scoping.GhostImportScopeProvider
import com.github.ugilio.ghost.scoping.GhostResourceDescriptionStrategy
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import com.github.ugilio.ghost.conversion.GhostValueConverter
import com.github.ugilio.ghost.linking.GhostLinker
import com.github.ugilio.ghost.naming.GhostLocationInFileProvider

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class GhostRuntimeModule extends AbstractGhostRuntimeModule {

	override bindIQualifiedNameProvider() {
		return GhostQualifiedNameProvider;
	}

	override configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(GhostImportScopeProvider);
	}

	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return GhostResourceDescriptionStrategy;
	}

	override bindIValueConverterService() {
		return GhostValueConverter;
	}
	
	override bindILinker() {
		return GhostLinker;
	}
	
	override bindILocationInFileProvider() {
		return GhostLocationInFileProvider;
	}
}
