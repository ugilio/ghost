/*
 * generated by Xtext 2.12.0
 */
package it.cnr.istc.ghost.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*
import org.junit.Rule
import org.eclipse.xtext.junit4.TemporaryFolder
import org.eclipse.xtext.util.IAcceptor
import org.eclipse.xtext.xbase.testing.CompilationTestHelper.Result
import it.cnr.istc.ghost.generator.internal.BlockImpl

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostGeneratorTest{

	@Rule @Inject public TemporaryFolder temporaryFolder 
	@Inject extension CompilationTestHelper
	
	private def printCompiled(CharSequence source) {
		source.compile(new IAcceptor<CompilationTestHelper.Result>() {
			override accept(Result r) {
				for (e : r.errorsAndWarnings)
					println(e);
				println(r.getSingleGeneratedCode());
			}
		});
	}
	
	private def printCompiled(Pair<String,? extends CharSequence> ...resources) {
		val len = resources.length; 
		if (len<1)
			return;
		val lastName = resources.get(len-1).key.replaceAll("\\.ghost",".ddl");
		resourceSet(resources).compile(new IAcceptor<CompilationTestHelper.Result>() {
			override accept(Result r) {
				for (e : r.errorsAndWarnings)
					println(e);
				for (e : r.allGeneratedResources.entrySet)
					if (e.key.endsWith(lastName)) {
						println(e.value);
						return;
					}
			}
		});
	}
	
	private def void assertCompiledContains(CharSequence source, CharSequence expected) {
		val boolean[] called = #[false];
		source.compile(new IAcceptor<CompilationTestHelper.Result>() {
			override accept(Result r) {
				called.set(0,true);
				val out = r.getSingleGeneratedCode().replaceAll('\\s+',' ');
				val exp = expected.toString().replaceAll('\\s+',' ');
				assertThat(out,containsString(exp));
			}
		});
		assertThat("Nothing was generated but the expectation was :\n"+expected, called.get(0), is(true));
	}
	
	private def assertCompiledContains(CharSequence expected,
		Pair<String,? extends CharSequence> ...resources) {
		val boolean[] called = #[false];
		val len = resources.length; 
		if (len<1)
			return;
		val lastName = resources.get(len-1).key.replaceAll("\\.ghost",".ddl");
		resourceSet(resources).compile(new IAcceptor<CompilationTestHelper.Result>() {
			override accept(Result r) {
				called.set(0,true);
				for (e : r.allGeneratedResources.entrySet)
					if (e.key.endsWith(lastName)) {
						val out = e.value.toString().replaceAll('\\s+',' ');
						val exp = expected.toString().replaceAll('\\s+',' ');
						assertThat(out,containsString(exp));
						return;
					}
			}
		});
	}
	
	private def assertCompilesTo(CharSequence expected,
		Pair<String,? extends CharSequence> ...resources) {
		val boolean[] called = #[false];
		val len = resources.length; 
		if (len<1)
			return;
		val lastName = resources.get(len-1).key.replaceAll("\\.ghost",".ddl");
		resourceSet(resources).compile(new IAcceptor<CompilationTestHelper.Result>() {
			override accept(Result r) {
				called.set(0,true);
				for (e : r.allGeneratedResources.entrySet)
					if (e.key.endsWith(lastName)) {
						assertThat(expected.toString(), is(equalTo(e.value.toString())));
						return;
					}
			}
		});
	}	
	
	@Test
	def void testEmpty() {
		'''
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
}
'''			
		);
	}
	
	@Test
	def void testDomainName() {
		'''
		domain theDomain;
		'''.assertCompilesTo(
'''
DOMAIN theDomain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
}
'''			
		);
	}

	@Test
	def void testEmptySVCompType() {
		'''
		type A = sv;
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable A ()
	{
	}
}
'''			
		);
	}

	@Test
	def void testSimpleRenewableResType() {
		'''
type A = resource(10);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE RenewableResource A (10)
}
'''			
		);
	}
	
	@Test
	def void testSimpleConsumableResType() {
		'''
type A = resource(10,20);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE ConsumableResource A (10, 20)
}
'''			
		);
	}
	
	@Test
	def void testUnspecifiedRenewableResType() {
		'''
type A = resource(_);
		'''.assertCompiledContains(
'''COMP_TYPE RenewableResource A (0)'''			
		);
	}
	
	@Test
	def void testUnspecifiedConsumableResType() {
		'''
type A = resource(_,_);
		'''.assertCompiledContains(
'''COMP_TYPE ConsumableResource A (0, 0)'''			
		);
	}
	
	@Test
	def void testIntType() {
		'''
type t = int 10;
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	PAR_TYPE NumericParameterType t = [10, 10];
}
'''			
		);
	}
	
	@Test
	def void testEnumType() {
		'''
type t = enum (E1, E2);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	PAR_TYPE EnumerationParameterType t = {E1, E2};
}
'''			
		);
	}
	
	@Test
	def void testSVType1() {
		'''
type T = sv(A);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable T (A())
	{
	}
}
'''			
		);
	}
	
	@Test
	def void testSVType2() {
		'''
type T = sv(A, B);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
	}
}
'''			
		);
	}
	
	@Test
	def void testSVTypeTC1() {
		'''
type T = sv(A -> B, B);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
		VALUE A() [0, +INF]
		MEETS
		{
			B();
		}
	}
}
'''			
		);
	}
	
	@Test
	def void testSVTypeTCInterval() {
		'''
type T = sv(A 12 -> B, B);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
		VALUE A() [12, 12]
		MEETS
		{
			B();
		}
	}
}
'''			
		);
	}
	
	@Test
	def void testTCParam1() {
		'''
type n = int [0, 100];
type T = sv(A(n x) -> B, B);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(n), B())
	{
		VALUE A(?x) [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testTCParamConstr1() {
		'''
type n = int [0, 100];
type T = sv(A(n x) -> x < 10);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(n))
	{
		VALUE A(?x) [0, +INF]
		MEETS
		{
			?x < 10;
		}
	}
'''			
		);
	}
	
	@Test
	def void testTCParamConstr2() {
		'''
type n = int [0, 100];
type T = sv(A(n x) -> B, B(n x));
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(n), B(n))
	{
		VALUE A(?x) [0, +INF]
		MEETS
		{
			B(?x1);
		}
	}
'''			
		);
	}
	
	@Test
	def void testTCParamConstr3() {
		'''
type n = int [0, 100];
type T = sv(A(n x) -> B(x), B(n x));
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(n), B(n))
	{
		VALUE A(?x) [0, +INF]
		MEETS
		{
			B(?x1);
			?x1 = ?x;
		}
	}
'''			
		);
	}
	
	@Test
	def void testTCParam2() {
		'''
type n = int [0, 100];
type T = sv(A -> B(10), B(n x));
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(), B(n))
	{
		VALUE A() [0, +INF]
		MEETS
		{
			B(?x1);
			?x1 = 10;
		}
	}
'''			
		);
	}
		
	@Test
	def void testTCGenParamNames() {
		'''
type n = int [0, 100];
type T = sv(A(n,n,n) -> B, B);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(n, n, n), B())
	{
		VALUE A(?n1, ?n2, ?n3) [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testCompSV1() {
		'''
comp C : sv(A);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable CType (A())
	{
	}
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
'''			
		);
	}
	
	@Test
	def void testCompSV2() {
		'''
comp C : sv(A, B);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable CType (A(), B())
	{
	}
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
'''			
		);
	}
	
	@Test
	def void testCompSV3() {
		'''
type T = sv(A, B);
comp C1 : T(transition: C);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
	}
	
	COMP_TYPE SingletonStateVariable C1Type (A(), B(), C())
	{
	}
	
	COMPONENT C1 {FLEXIBLE timeline()} : C1Type;
'''			
		);
	}
	
	@Test
	def void testCompSVTC1() {
		'''
comp C : sv(A -> B, B);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable CType (A(), B())
	{
		VALUE A() [0, +INF]
		MEETS
		{
			B();
		}
	}
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
'''			
		);
	}
	
	@Test
	def void testCompRes1() {
		'''
comp C : resource(10);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE RenewableResource CType (10)
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
'''
		);
	}

	@Test
	def void testCompRes2() {
		'''
comp C : resource(10, 20);
		'''.assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE ConsumableResource CType (10, 20)
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
'''
		);
	}
	
	@Test
	def void testCompRes3() {
		'''
type T = resource(_);
comp C : T(10);
		'''.assertCompiledContains(
'''
	COMP_TYPE RenewableResource T (0)
	COMP_TYPE RenewableResource CType1 (10)
	COMPONENT C {FLEXIBLE timeline()} : CType1;
'''
		);
	}

	@Test
	def void testCompRes4() {
		'''
type T = resource(_,_);
comp C : T(10,20);
		'''.assertCompiledContains(
'''
	COMP_TYPE ConsumableResource T (0, 0)
	COMP_TYPE ConsumableResource CType1 (10, 20)
	COMPONENT C {FLEXIBLE timeline()} : CType1;
'''
		);
	}

	@Test
	def void testSync1() {
		'''
comp C : sv(
	A,B
synchronize:
	A -> meets B
);
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncGenParamNames() {
		'''
type n = int [0, 100];
comp C : sv(
	A(n,n,n), B
synchronize:
	A -> meets B;
);
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C.timeline
	{
		VALUE A(?n1, ?n2, ?n3)
		{
			MEETS instval1;
			instval1 B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncCompRef1() {
		'''
comp C1 : sv(A
synchronize:
	A -> meets C2.B;
);
comp C2 : sv(B);
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C2.timeline.B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncCompRef2() {
		'''
type n = int [0,100];
comp C1 : sv(A(n)
synchronize:
	A(x) -> meets C2.B(x);
);
comp C2 : sv(B(n));
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A(?x)
		{
			MEETS instval1;
			?n1 = ?x;
			instval1 C2.timeline.B(?n1);
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncComplexExp1() {
		if (!BlockImpl.OPTIMIZE)
		'''
type n = int [0,100];
comp C1 : sv(A
synchronize:
	A -> meets C2.B(4*(7+5));
);
comp C2 : sv(B(n));
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			?n1 = 4 * (7 + 5);
			instval1 C2.timeline.B(?n1);
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncComplexExp2() {
		if (BlockImpl.OPTIMIZE)
		'''
type n = int [0,100];
comp C1 : sv(A
synchronize:
	A -> meets C2.B(4*(7+5));
);
comp C2 : sv(B(n));
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			?n1 = 48;
			instval1 C2.timeline.B(?n1);
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncVar1() {
		if (!BlockImpl.OPTIMIZE)
		'''
type n = int [0,100];
comp C1 : sv(A
synchronize:
	A -> (var x = 12+7; meets C2.B(x);)
);
comp C2 : sv(B(n));
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			?x = 12 + 7;
			instval1 C2.timeline.B(?x);
		}
	}
'''
		);
	}
	
	@Test
	def void testSyncVar1Optimized() {
		if (BlockImpl.OPTIMIZE)
		'''
type n = int [0,100];
comp C1 : sv(A
synchronize:
	A -> (var x = 12+7; meets C2.B(x);)
);
comp C2 : sv(B(n));
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			?x = 19;
			instval1 C2.timeline.B(?x);
		}
	}
'''
		);
	}	
	
	@Test
	def void testResSync1() {
		'''
type R = resource(10
synchronize:
	require(x) -> x < 10;
);

comp C : R;
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C.timeline
	{
		VALUE REQUIREMENT(?x)
		{
			?x < 10;
		}
	}
'''			
		);
	}
	
	@Test
	def void testExternal1() {
		'''
external type T = sv(A);

comp C : T;
		'''.assertCompiledContains(
'''
COMPONENT C {FLEXIBLE timeline(external)} : T;
'''			
		);
	}
	
	@Test
	def void testExternal2() {
		'''
external type T = resource(10);

comp C : T;
		'''.assertCompiledContains(
'''
COMPONENT C {FLEXIBLE timeline(external)} : T;
'''			
		);
	}
	
	@Test
	def void testExternal3() {
		'''
external comp C : sv(A);
		'''.assertCompiledContains(
'''
COMPONENT C {FLEXIBLE timeline(external)} : CType;
'''			
		);
	}
	
	@Test
	def void testExternal4() {
		'''
external comp C : resource(10);
		'''.assertCompiledContains(
'''
COMPONENT C {FLEXIBLE timeline(external)} : CType;
'''			
		);
	}
	
	@Test
	def void testExternal5() {
		'''
type T = sv(A);

comp C1 : T;
external comp C2 : T;
		'''.assertCompiledContains(
'''
COMPONENT C1 {FLEXIBLE timeline()} : T;
COMPONENT C2 {FLEXIBLE timeline(external)} : C2Type1;
'''			
		);
	}
	
	@Test
	def void testExternalOverride1() {
		'''
external type T = sv(A);
planned type T2 = sv T;

comp C : T2;
		'''.assertCompiledContains(
'''
COMPONENT C {FLEXIBLE timeline()} : T2;
'''			
		);
	}
	
	@Test
	def void testControllable1() {
		'''
type T = sv(
	contr A -> B,
	B
);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
		VALUE <c> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}

	@Test
	def void testControllable2() {
		'''
type T = sv(
	uncontr A -> B,
	B
);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
		VALUE <u> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}

	@Test
	def void testControllable3() {
		'''
comp C : sv(
	contr A -> B,
	B
);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable CType (A(), B())
	{
		VALUE <c> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}

	@Test
	def void testControllable4() {
		'''
comp C : sv(
	uncontr A -> B,
	B
);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable CType (A(), B())
	{
		VALUE <u> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}

	@Test
	def void testControllable5() {
		'''
type T = sv(
	contr A -> B,
	B
);

type T2 = sv T;
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T2 (A(), B())
	{
		VALUE <c> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}

	@Test
	def void testControllableOverride1() {
		'''
type T = sv(
	contr A -> B,
	B
);

type T2 = sv T(uncontr A -> inherited);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T2 (B(), A())
	{
		VALUE <u> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testControllableOverride2() {
		'''
type T = sv(
	contr A -> B,
	B
);

comp C : T (uncontr A -> inherited);
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable CType (B(), A())
	{
		VALUE <u> A() [0, +INF]
		MEETS
		{
			B();
		}
	}
'''			
		);
	}

	@Test
	def void testInheritance1() {
		'''
type T1 = sv(A,B);
type T2 = sv T1;
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T2 (A(), B())
	{
	}
'''			
		);
	}
	
	@Test
	def void testInheritance2() {
		'''
type T1 = sv(A,B
synchronize:
	A -> meets B;
);
type T2 = sv T1;
comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			MEETS instval1;
			instval1 B();
		}
'''			
		);
	}
	
	@Test
	def void testResInheritance1() {
		'''
type T1 = resource (10);
type T2 = resource T1;

comp C : T2;
	'''.assertCompiledContains(
'''
	COMP_TYPE RenewableResource T1 (10)
	COMP_TYPE RenewableResource T2 (10)
'''		
		);
	}
	
	@Test
	def void testResInheritance2() {
		'''
type T1 = resource (10,20);
type T2 = resource T1;

comp C : T2;
	'''.assertCompiledContains(
'''
	COMP_TYPE ConsumableResource T1 (10, 20)
	COMP_TYPE ConsumableResource T2 (10, 20)
'''		
		);
	}
	
	@Test
	def void testResInheritance3() {
		'''
type A = resource(_,_);
type B = resource(_,20);
comp C : B(10,_);
	'''.assertCompiledContains(
'''
	COMP_TYPE ConsumableResource A (0, 0)
	COMP_TYPE ConsumableResource B (0, 20)
	COMP_TYPE ConsumableResource CType1 (10, 20)
	COMPONENT C {FLEXIBLE timeline()} : CType1;
'''		
		);
	}
	
	@Test
	def void testResInheritance4() {
		'''
type A = resource(_);
type B = resource A;
comp C : B(10);
	'''.assertCompiledContains(
'''
	COMP_TYPE RenewableResource A (0)
	COMP_TYPE RenewableResource B (0)
	COMP_TYPE RenewableResource CType1 (10)
	COMPONENT C {FLEXIBLE timeline()} : CType1;
'''		
		);
	}
	
	@Test
	def void testTCOverride1() {
		'''
type T1 = sv (A -> B, B);
type T2 = sv T1 (A -> ())
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T2 (B(), A())
	{
	}
'''			
		);
	}
	
	@Test
	def void testTCOverride2() {
		'''
type T1 = sv (A -> B, B);
type T2 = sv T1 (A -> C, C)
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T2 (B(), A(), C())
	{
		VALUE A() [0, +INF]
		MEETS
		{
			C();
		}
	}
'''			
		);
	}
	
	@Test
	def void testTCInherited1() {
		'''
type T1 = sv (A -> B, B);
type T2 = sv T1 (A -> (inherited; C), C)
		'''.assertCompiledContains(
'''
	COMP_TYPE SingletonStateVariable T2 (B(), A(), C())
	{
		VALUE A() [0, +INF]
		MEETS
		{
			C();
			B();
		}
	}
'''			
		);
	}
	
	@Test
	def void testSyncOverride() {
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x)
synchronize:
	A(x) -> x < 100
);

type T2 = sv T1 (
synchronize:
	A(x) -> x > 10 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?x)
		{
			?x > 10;
		}
'''			
		);
	}

	@Test
	def void testSyncInherited1() {
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x)
synchronize:
	A(x) -> x < 100
);

type T2 = sv T1 (
synchronize:
	A(x) -> (inherited; x > 10) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?x)
		{
			?x > 10;
			?x < 100;
		}
'''			
		);
	}
	
	@Test
	def void testSyncInherited2() {
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x)
synchronize:
	A(x) -> x < 100
);

type T2 = sv T1 (
synchronize:
	A(y) -> (inherited; y > 10) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?y)
		{
			?y > 10;
			?y < 100;
		}
'''			
		);
	}
	
	@Test
	def void testSyncInherited3() {
		if (!BlockImpl.OPTIMIZE)
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x)
synchronize:
	A(x) -> (
		var y = 7 + 12;
		x < y
	)
);

type T2 = sv T1 (
synchronize:
	A(y) -> (inherited; y > 10) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?y)
		{
			?y > 10;
			?y < ?y1;
			?y1 = 7 + 12;
		}
'''
		);
	}
	
	@Test
	def void testSyncInherited3Optimized() {
		if (BlockImpl.OPTIMIZE)
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x)
synchronize:
	A(x) -> (
		var y = 7 + 12;
		x < y
	)
);

type T2 = sv T1 (
synchronize:
	A(y) -> (inherited; y > 10) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?y)
		{
			?y > 10;
			?y < 19;
			?y1 = 19;
		}
'''
		);
	}	
	
	@Test
	def void testSyncInherited4() {
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x), B(n x1, n x2, n x3)
synchronize:
	A(x) -> (
		var y = B(y1,y2,y3);
		meets y;
		var y1 = 12;
		var y2 = 27;
		var y3 = 43;
	)
);

type T2 = sv T1 (
synchronize:
	A(y) -> (inherited; y > 10) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?y)
		{
			MEETS y1;
			?y > 10;
			y1 B(?y2, ?y3, ?y4);
			?y2 = 12;
			?y3 = 27;
			?y4 = 43;
		}
'''
		);
	}
	
	@Test
	def void testSyncInherited5() {
		'''
type n = int [0, 100];

type T1 = sv (
	A(n x), B(n x1, n x2, n x3)
synchronize:
	A(x) -> (
		start(this) = end(B(1,2,3));
	)
);

type T2 = sv T1 (
synchronize:
	A(y) -> (inherited; y > 10) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
		VALUE A(?y)
		{
			instval1 START-END [0, 0] instval2;
			?y > 10;
			?x1 = ?y;
			?x2 = 1;
			?x3 = 2;
			?x4 = 3;
			instval1 A(?x1);
			instval2 B(?x2, ?x3, ?x4);
		}
'''			
		);
	}

	@Test
	def void testResSyncInherited1() {
		'''
type T1 = resource (10
synchronize:
	require(x) -> x < 10;
);

type T2 = resource T1 (
synchronize:
	require(x) -> (inherited; x > 5) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C.timeline
	{
		VALUE REQUIREMENT(?x)
		{
			?x > 5;
			?x < 10;
		}
	}
'''
		);
	}	
	
	@Test
	def void testResSyncInherited2() {
		'''
type T1 = resource (10,20
synchronize:
	produce(x) -> x < 10;
);

type T2 = resource T1 (
synchronize:
	produce(x) -> (inherited; x > 5) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C.timeline
	{
		VALUE PRODUCTION(?x)
		{
			?x > 5;
			?x < 10;
		}
	}
'''
		);
	}
	
	@Test
	def void testResSyncInherited3() {
		'''
type T1 = resource (10,20
synchronize:
	consume(x) -> x < 10;
);

type T2 = resource T1 (
synchronize:
	consume(x) -> (inherited; x > 5) 
);

comp C : T2;
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C.timeline
	{
		VALUE CONSUMPTION(?x)
		{
			?x > 5;
			?x < 10;
		}
	}
'''
		);
	}

	@Test
	def void testCompInherited() {
		'''
type t = resource(10
synchronize:
	require(x) -> x < 10
);
comp c : t(
synchronize:
	require(x) -> (inherited; x > 5)
)
		'''.assertCompiledContains(
'''
	SYNCHRONIZE c.timeline
	{
		VALUE REQUIREMENT(?x)
		{
			?x > 5;
			?x < 10;
		}
	}
'''
		);
	}	

	@Test
	def void testThis01() {
		'''
type t = sv (
	A, B
synchronize:
	A -> meets B;
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			MEETS instval1;
			instval1 B();
		}
'''			
		);
	}
	
	@Test
	def void testThis02() {
		'''
type t = sv (
	A, B
synchronize:
	A -> this meets B;
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			MEETS instval2;
			instval2 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis03() {
		'''
type t = sv (
	A, B
synchronize:
	A -> B meets this;
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			MET-BY instval1;
			instval1 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis04() {
		'''
type t = sv (
	A, B
synchronize:
	A -> start(this) = start(B)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			START-START [0, 0] instval2;
			instval2 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis05() {
		'''
type t = sv (
	A, B
synchronize:
	A -> start(B) = start(this)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			START-START [0, 0] instval1;
			instval1 B();
		}
'''	
		);
	}
	
	//This is tricky
	@Test
	def void testThis06() {
		'''
type t = sv (
	A, B
synchronize:
	A -> start(this) > start(B)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			instval2 START-START [1, +INF] instval1;
			instval1 A();
			instval2 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis06b() {
		'''
type n = int [0,100];
type t = sv (
	A(n x1, n x2), B
synchronize:
	A -> start(this) > start(B)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A(?x1, ?x2)
		{
			instval2 START-START [1, +INF] instval1;
			?x3 = ?x1;
			?x4 = ?x2;
			instval1 A(?x3, ?x4);
			instval2 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis07() {
		'''
type t = sv (
	A, B
synchronize:
	A -> B contains this
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			DURING [0, +INF] [0, +INF] instval1;
			instval1 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis08() {
		'''
type t = sv (
	A, B
synchronize:
	A -> B during this
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			CONTAINS [0, +INF] [0, +INF] instval1;
			instval1 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis09() {
		'''
type t = sv (
	A, B
synchronize:
	A -> B starts end(this)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			END-START [0, 0] instval1;
			instval1 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis10() {
		'''
type t = sv (
	A, B
synchronize:
	A -> B contains end(this)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			ENDS-DURING [0, +INF] [0, +INF] instval1;
			instval1 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis11() {
		'''
type t = sv (
	A, B
synchronize:
	A -> this < B
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			BEFORE [1, +INF] instval2;
			instval2 B();
		}
'''	
		);
	}
	
	@Test
	def void testThis12() {
		'''
type t = sv (
	A, B
synchronize:
	A -> start(this) = end(this)
);

comp COMP : t;
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			START-END [0, 0] instval2;
			instval2 A();
		}
'''	
		);
	}
	
	@Test
	def void testThisRes() {
		'''
comp C : sv(A);
comp R : resource(10
synchronize:
	require(x) -> this equals C.A;
);
		'''.assertCompiledContains(
'''
		VALUE REQUIREMENT(?x)
		{
			EQUALS instval2;
			?amount1 = ?x;
			instval2 C.timeline.A();
		}
'''			
		);
	}
	
	@Test
	def void testResActionMissingArgs() {
		'''
comp r : resource(10);
comp c : sv(
	A
synchronize:
	A -> require r(_);
);
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			EQUALS instval1;
			instval1 r.timeline.REQUIREMENT(?amount1);
		}
'''	
		);
	}
	
	@Test
	def void testGeneratedTypeName1() {
		'''
comp AComp : sv(A);
		'''.assertCompiledContains(
'''
COMPONENT AComp {FLEXIBLE timeline()} : ACompType;
'''	
		);
	}
	
	@Test
	def void testGeneratedTypeName2() {
		'''
type ACompType = sv(A);
comp AComp : sv(B);
		'''.assertCompiledContains(
'''
COMPONENT AComp {FLEXIBLE timeline()} : ACompType1;
'''	
		);
	}
	
	@Test
	def void testObjVarDecl1() {
		'''
type T = sv (
	A
synchronize:
	A -> meets other.A
variable:
	other : T;
);
comp C1: T[C2];
comp C2: T[C1];
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C2.timeline.A();
		}
	}
	
	SYNCHRONIZE C2.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C1.timeline.A();
		}
	}
'''	
		);
	}

	@Test
	def void testObjVarDeclInherited1() {
		'''
type T = sv (A,B);

type T1 = sv (
	C
synchronize:
	C -> meets other.A
variable:
	other : T;
);

type T2 = sv T1;

comp C1: T;
comp C2: T2[C1];
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C2.timeline
	{
		VALUE C()
		{
			MEETS instval1;
			instval1 C1.timeline.A();
		}
	}
'''			
		);
	}
	
	@Test
	def void testObjVarDeclInherited2() {
		'''
type T1 = sv (
	A
synchronize:
	A -> meets other.A
variable:
	other : T2;
);

type T2 = sv T1;

comp C1: T2[C2];
comp C2: T2[C1];
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C2.timeline.A();
		}
	}
	
	SYNCHRONIZE C2.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C1.timeline.A();
		}
	}
'''
		);
	}
	
	@Test
	def void testObjVarDeclInherited3() {
		'''
type T1 = sv (
	A
synchronize:
	A -> meets other.A
variable:
	other : T1;
);

type T2 = sv T1;

comp C1: T2[C2];
comp C2: T2[C1];
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C2.timeline.A();
		}
	}
	
	SYNCHRONIZE C2.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			instval1 C1.timeline.A();
		}
	}
'''
		);
	}	
	
	@Test
	def void testObjVarDeclInherited4() {
		'''
type T1 = sv (
	A
variable:
	other : T2;
);

type T2 = sv T1(
synchronize:
	A -> (meets other.A; meets var2.A);
variable:
	var2 : T2;
);

comp C1: T2[C2,C2];
comp C2: T2[C1,C1];
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			MEETS instval2;
			instval1 C2.timeline.A();
			instval2 C2.timeline.A();
		}
	}
	
	SYNCHRONIZE C2.timeline
	{
		VALUE A()
		{
			MEETS instval1;
			MEETS instval2;
			instval1 C1.timeline.A();
			instval2 C1.timeline.A();
		}
	}
'''
		);
	}
	
	@Test
	def void testObjVarDeclInherited5() {
		'''
type T1 = resource (10
variable:
	other : T2;
);

type T2 = resource T1(
synchronize:
	require(x) -> (require other(5); require var2(7));
variable:
	var2 : T2;
);

comp C1: T2[C2,C2];
comp C2: T2[C1,C1];
		'''.assertCompiledContains(
'''
	SYNCHRONIZE C1.timeline
	{
		VALUE REQUIREMENT(?x)
		{
			EQUALS instval1;
			EQUALS instval2;
			?amount1 = 5;
			instval1 C2.timeline.REQUIREMENT(?amount1);
			?amount2 = 7;
			instval2 C2.timeline.REQUIREMENT(?amount2);
		}
	}
	
	SYNCHRONIZE C2.timeline
	{
		VALUE REQUIREMENT(?x)
		{
			EQUALS instval1;
			EQUALS instval2;
			?amount1 = 5;
			instval1 C1.timeline.REQUIREMENT(?amount1);
			?amount2 = 7;
			instval2 C1.timeline.REQUIREMENT(?amount2);
		}
'''			
		);
	}

	@Test
	def void testInit1() {
		'''
comp C: sv(A,B);

init (
	fact C.A at 0 0 0;
);
		'''.assertCompiledContains(
'''
{
	<fact> C.timeline.A() AT [0, 0] [0, 0] [0, 0];
}
'''
		);
	}
	
	@Test
	def void testInit2() {
		'''
comp C: sv(A,B);

init fact C.A at 0 10 10;
init fact C.B at 10 10 20;
		'''.assertCompiledContains(
'''
{
	<fact> C.timeline.A() AT [0, 0] [10, 10] [10, 10];
	<fact> C.timeline.B() AT [10, 10] [10, 10] [20, 20];
}
'''
		);
	}
	
	@Test
	def void testInit3() {
		'''
comp C: sv(A,B);

init fact C.A;
		'''.assertCompiledContains(
'''
{
	<fact> C.timeline.A() AT [0, +INF] [0, +INF] [0, +INF];
}
'''
		);
	}
	
	@Test
	def void testInit4() {
		'''
comp C: sv(A,B);

init (
	fact C.A at 10 _ 100;
);
		'''.assertCompiledContains(
'''
{
	<fact> C.timeline.A() AT [10, 10] [0, +INF] [100, 100];
}
'''
		);
	}
	
	@Test
	def void testInit5() {
		'''
comp C: sv(A,B);

init (var x = 15;);
init (var x = 12;);
		'''.assertCompiledContains(
'''
{
	?x = 15;
	?x1 = 12;
}
'''
		);
	}
	
	@Test
	def void testInitParams1() {
		'''
comp C: sv(A,B);

init (var start = 10; var horizon = 100; var resolution = 200;)
		'''.assertCompiledContains(
'''
{
	?start = 10;
	?horizon = 100;
	?resolution = 200;
}
'''
		);
	}
	
	@Test
	def void testInitParams1b() {
		'''
comp C: sv(A,B);

init (var start = 10; var horizon = 100; var resolution = 200;)
		'''.assertCompiledContains(
'''
TEMPORAL_MODULE module = [10, 100], 200;
'''
		);
	}
	
	@Test
	def void testInitParams2() {
		'''
comp C: sv(A,B);

init (var start = 10; var horizon = 100; var resolution = 200;);
init (var start = 20; var resolution = 400;);
		'''.assertCompiledContains(
'''
{
	?horizon = 100;
	?start = 20;
	?resolution = 400;
}
'''
		);
	}
	
	@Test
	def void testInitParams2b() {
		'''
comp C: sv(A,B);

init (var start = 10; var horizon = 100; var resolution = 200;);
init (var start = 20; var resolution = 400;);
		'''.assertCompiledContains(
'''
TEMPORAL_MODULE module = [20, 100], 400;
'''
		);
	}
	
	@Test
	def void testConstUsage1() {
		'''
type n = int [0, 100];
const K = 23;
comp C: sv(
	A -> B(K),
B(n)
);
		'''.assertCompiledContains(
'''
		VALUE A() [0, +INF]
		MEETS
		{
			B(?n1);
			?n1 = 23;
		}
'''
		);
	}
	
	@Test
	def void testTempExp1() {
		'''
comp C: sv(
	A
synchronize:
	A -> this = A;
);
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			EQUALS instval2;
			instval2 A();
		}
'''			
		);
	}	
	
	@Test
	def void testTempExp2() {
		'''
comp C: sv(
	A
synchronize:
	A -> = A;
);
		'''.assertCompiledContains(
'''
		VALUE A()
		{
			EQUALS instval1;
			instval1 A();
		}
'''			
		);
	}	
	
	@Test
	def void testExp1Optimized() {
		if (BlockImpl.OPTIMIZE)
		'''
comp C: sv(
	A -> 32-(10-5) > 0
);
		'''.assertCompiledContains(
'''
VALUE A() [0, +INF]
MEETS
{
	1;
}
'''			
		);
	}
	
	@Test
	def void testExp1() {
		if (!BlockImpl.OPTIMIZE)
		'''
comp C: sv(
	A -> 32-(10-5) > 0
);
		'''.assertCompiledContains(
'''
32 - (10 - 5) > 0;
'''			
		);
	}	
	
	@Test
	def void testImports1() {
		val d1 = 'd1.ghost' -> '''
domain d1;

type T = sv(A,B);
		''';  
		val main = 'main.ghost' -> '''
import d1;

comp C : T;
		''';
		assertCompilesTo('''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
	}
	
	COMPONENT C {FLEXIBLE timeline()} : T;
}
		''',
			d1,main
		);
	}
	
	@Test
	def void testImports2() {
		val d1 = 'd1.ghost' -> '''
domain d1;

type T = sv(A,B);
		''';  
		val main = 'main.ghost' -> '''
import d1;

comp C : sv(C,D);
		''';
		assertCompilesTo('''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable CType (C(), D())
	{
	}
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
		''',
			d1,main
		);
	}

	@Test
	def void testImports3() {
		val d1 = 'd1.ghost' -> '''
domain d1;

type T = sv(A,B);

comp C1: T;
		''';  
		val main = 'main.ghost' -> '''
import d1;

comp C2 : sv(C,D);
		''';
		assertCompilesTo('''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable C2Type (C(), D())
	{
	}
	
	COMP_TYPE SingletonStateVariable T (A(), B())
	{
	}
	
	COMPONENT C2 {FLEXIBLE timeline()} : C2Type;
	COMPONENT C1 {FLEXIBLE timeline()} : T;
}
		''',
			d1,main
		);
	}
	
	@Test
	def void testImports4() {
		val d1 = 'd1.ghost' -> '''
domain d1;

comp C: sv(A,B);

init fact C.A at 0 10 10;
		''';  
		val main = 'main.ghost' -> '''
import d1;

init fact C.B at 10 10 20;
		''';
		assertCompiledContains(
'''
{
	<fact> C.timeline.A() AT [0, 0] [10, 10] [10, 10];
	<fact> C.timeline.B() AT [10, 10] [10, 10] [20, 20];
}
''',
			d1,main
		);
	}
	
	@Test
	def void testImports5() {
		val d1 = 'd1.ghost' -> '''
domain d1;

type n = int [0, 100];
		''';  
		val main = 'main.ghost' -> '''
import d1;

comp C : sv(A(n));
		''';
		assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	PAR_TYPE NumericParameterType n = [0, 100];
	
	COMP_TYPE SingletonStateVariable CType (A(n))
	{
	}
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
''',
			d1,main
		);
	}
	
	@Test
	def void testImports6() {
		val d1 = 'd1.ghost' -> '''
domain d1;

type n = int [0, 100];
		''';  
		val main = 'main.ghost' -> '''
import d1;

comp C : sv(A());
		''';
		assertCompilesTo(
'''
DOMAIN domain
{
	TEMPORAL_MODULE module = [0, 1000], 1000;
	
	COMP_TYPE SingletonStateVariable CType (A())
	{
	}
	
	COMPONENT C {FLEXIBLE timeline()} : CType;
}
''',
			d1,main
		);
	}
	
}
