/*
 * generated by Xtext 2.12.0
 */
package it.cnr.istc.ghost.tests

import com.google.inject.Inject
import it.cnr.istc.ghost.ghost.Ghost
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*
import org.eclipse.xtext.EcoreUtil2
import it.cnr.istc.ghost.ghost.QualifInstVal
import it.cnr.istc.ghost.ghost.NamedPar
import it.cnr.istc.ghost.ghost.FormalPar
import it.cnr.istc.ghost.ghost.LocVarDecl
import it.cnr.istc.ghost.ghost.ValueDecl
import it.cnr.istc.ghost.ghost.Synchronization
import it.cnr.istc.ghost.ghost.CompDecl
import it.cnr.istc.ghost.ghost.ObjVarDecl
import it.cnr.istc.ghost.ghost.SvDecl
import it.cnr.istc.ghost.ghost.SimpleInstVal
import it.cnr.istc.ghost.ghost.BindList
import it.cnr.istc.ghost.ghost.AnonSVDecl
import it.cnr.istc.ghost.ghost.NamedCompDecl
import it.cnr.istc.ghost.ghost.CompSVBody

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostCrossRefTest{

	@Inject
	ParseHelper<Ghost> parseHelper
	
	@Test
	def void testNamedParRef() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> x < 10;
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val value = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,NamedPar).head;
		assertThat(par.name,is(equalTo("x")));
		assertThat(value,is(par));
	}
	
	@Test
	def void testResourceNamedParRef() {
		val result = parseHelper.parse('''
comp AResWithAnonymousType : resource(10
synchronize:
	require(x) -> x < 10;
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val value = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,NamedPar).head;
		assertThat(par.name,is(equalTo("x")));
		assertThat(value,is(par));
	}
	
	@Test
	def void testFormalParRef() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> (B, x < 10);
	B
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val value = EcoreUtil2.eAllOfType(result,QualifInstVal).get(1).value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,FormalPar).head;
		assertThat(par.name,is(equalTo("x")));
		assertThat(value,is(par));
	}
	
	@Test
	def void testLocVarRef() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> (var y = x + 1; y < 10;)
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val value = EcoreUtil2.eAllOfType(sync,QualifInstVal).get(1).value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,LocVarDecl).head;
		assertThat(par.name,is(equalTo("y")));
		assertThat(value,is(par));
	}
	
	@Test
	def void testValueRef1() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> B
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val value = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,ValueDecl).get(1);
		assertThat(par.name,is(equalTo("B")));
		assertThat(value,is(par));
	}
	
	@Test
	def void testCompValueRef2a() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> ASVWithAnonymousType.B
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val comp = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.comp;
		assertNotNull(comp);
		assertThat(comp.eIsProxy,is(false));
		val comp2 = EcoreUtil2.eAllOfType(result,CompDecl).head;
		assertThat(comp,is(comp2));
	}
	
	@Test
	def void testCompValueRef2b() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> ASVWithAnonymousType.B
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val value = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,ValueDecl).get(1);
		assertThat(par.name,is(equalTo("B")));
		assertThat(value,is(par));
	}			

	@Test
	def void testCompValueRef3a() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

type ASVType = sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> other.B;
variable:
	other : ASVType;
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val comp = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.comp;
		assertNotNull(comp);
		assertThat(comp.eIsProxy,is(false));
		val comp2 = EcoreUtil2.eAllOfType(result,ObjVarDecl).head;
		assertThat(comp,is(comp2));
	}
	
	@Test
	def void testCompValueRef3b() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

type ASVType = sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> other.B;
variable:
	other : ASVType;
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val value = EcoreUtil2.eAllOfType(sync,QualifInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,ValueDecl).get(1);
		assertThat(par.name,is(equalTo("B")));
		assertThat(value,is(par));
	}		

	@Test	
	def void testSyncInheritance() {
		val result = parseHelper.parse('''
type t = int [0,100];
type ct = sv (
	A(t x1, t x2)
synchronize:
	A(x) -> x < 10
);
type ct2 = sv ct(
synchronize:
	A(x) -> x < 10
)
		''');
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sv2 = EcoreUtil2.eAllOfType(result,SvDecl).get(1);
		val value = EcoreUtil2.eAllOfType(sv2,SimpleInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val sv1 = EcoreUtil2.eAllOfType(result,SvDecl).head;
		val orig = EcoreUtil2.eAllOfType(sv1,ValueDecl).head;
		assertThat(orig.name,is(equalTo("A")));
		assertThat(value,is(orig));
	}
	
	@Test	
	def void testBindListNameRef() {
		val result = parseHelper.parse('''
type t = sv(A
variable:
	avar : t;
);
comp c : t[avar=c];
		''');
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val bl = EcoreUtil2.eAllOfType(result,BindList)?.head;
		assertNotNull(bl?.values);
		val ref = bl.values.get(0).name;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));
		val sv = EcoreUtil2.eAllOfType(result,SvDecl).head;
		val orig = EcoreUtil2.eAllOfType(sv,ObjVarDecl).head;
		assertThat(orig.name,is(equalTo("avar")));
		assertThat(ref,is(orig));
	}
	
	@Test
	def void testNamedParTypeRef1() {
		val result = parseHelper.parse('''
type t = int [0,100];
comp c : sv(
	A(t x) -> B, B
synchronize:
	A(x) -> x < 10
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val namedParType = EcoreUtil2.eAllOfType(result,NamedPar).head?.type;
		assertNotNull(namedParType);
		assertThat(namedParType.eIsProxy,is(false));
		val formalParType = EcoreUtil2.eAllOfType(result,FormalPar).head?.type;
		assertThat(formalParType.name,is(equalTo("t")));
		assertThat(formalParType,is(namedParType));
	}
	
	@Test
	def void testNamedParTypeRef2() {
		val result = parseHelper.parse('''
type t = int [0,100];
comp c : sv(
	A(t x) -> B, B
synchronize:
	A(_) -> 0 < 10
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val namedParType = EcoreUtil2.eAllOfType(result,NamedPar).head?.type;
		assertNotNull(namedParType);
		assertThat(namedParType.eIsProxy,is(false));
		val formalParType = EcoreUtil2.eAllOfType(result,FormalPar).head?.type;
		assertThat(formalParType.name,is(equalTo("t")));
		assertThat(formalParType,is(namedParType));
	}
	
	
	@Test
	def void testCompValueRef4a() {
		val result = parseHelper.parse('''
comp C1 : sv (
  A -> B;
  B -> A;
synchronize:
  A -> during C2.D;
);

comp C2 : sv (
  C -> D;
  D -> C;
);
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val syncs = EcoreUtil2.eAllOfType(result,AnonSVDecl).head?.body?.synchronizations;
		val qiv = EcoreUtil2.eAllOfType(syncs.get(0),QualifInstVal).head;
		val ref = qiv?.value;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));

		val comp = qiv?.comp;
		assertThat(comp.eIsProxy,is(false));
		val origComp = EcoreUtil2.eAllOfType(result,AnonSVDecl).get(1);
		assertThat(comp,is(origComp));
		val origVal = origComp.body.transitions.get(0).values.get(1).head;
		assertThat(ref,is(origVal));
	}
	
	@Test
	def void testCompValueRefInherited1() {
		val result = parseHelper.parse('''
comp C1 : sv (
  A -> B;
  B -> A;
synchronize:
  A -> during C2.D;
);

type T = sv (
  C -> D;
  D -> C;
);

comp C2 : T;
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val syncs = EcoreUtil2.eAllOfType(result,AnonSVDecl).head?.body?.synchronizations;
		val qiv = EcoreUtil2.eAllOfType(syncs.get(0),QualifInstVal).head;
		val ref = qiv?.value;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));

		val comp = qiv?.comp;
		assertThat(comp.eIsProxy,is(false));
		val origComp = EcoreUtil2.eAllOfType(result,NamedCompDecl).head;
		assertThat(comp,is(origComp));
		val origType = EcoreUtil2.eAllOfType(result,SvDecl).head;
		val origVal = origType.body.transitions.get(0).values.get(1).head;
		assertThat(ref,is(origVal));
	}
	
	@Test
	def void testCompValueRefInherited2() {
		val result = parseHelper.parse('''
comp C1 : sv (
  A -> B;
  B -> A;
synchronize:
  A -> during C2.D;
);

type T = sv (
  C -> D;
  D -> C;
);

comp C2 : T(E -> D);
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val syncs = EcoreUtil2.eAllOfType(result,AnonSVDecl).head?.body?.synchronizations;
		val qiv = EcoreUtil2.eAllOfType(syncs.get(0),QualifInstVal).head;
		val ref = qiv?.value;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));

		val comp = qiv?.comp;
		assertThat(comp.eIsProxy,is(false));
		val origComp = EcoreUtil2.eAllOfType(result,NamedCompDecl).head;
		assertThat(comp,is(origComp));
		val origType = EcoreUtil2.eAllOfType(result,SvDecl).head;
		val origVal = origType.body.transitions.get(0).values.get(1).head;
		assertThat(ref,is(origVal));
	}

	@Test
	def void testCompValueRefInherited3() {
		val result = parseHelper.parse('''
comp C1 : sv (
  A -> B;
  B -> A;
synchronize:
  A -> during C2.E;
);

type T = sv (
  C -> D;
  D -> C;
);

comp C2 : T(E -> D);
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val syncs = EcoreUtil2.eAllOfType(result,AnonSVDecl).head?.body?.synchronizations;
		val qiv = EcoreUtil2.eAllOfType(syncs.get(0),QualifInstVal).head;
		val ref = qiv?.value;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));

		val comp = qiv?.comp;
		assertThat(comp.eIsProxy,is(false));
		val origComp = EcoreUtil2.eAllOfType(result,NamedCompDecl).head;
		assertThat(comp,is(origComp));
		val origVal = (origComp.body as CompSVBody).transitions.get(0).values.head.head;
		assertThat(ref,is(origVal));
	}
	
	@Test
	def void testCompValueRefInherited4() {
		val result = parseHelper.parse('''
comp C1 : sv (
  A -> B;
  B -> A;
synchronize:
  A -> during C2.D;
);

type T1 = sv (
  C -> D;
  D -> C;
);

type T2 = sv T1;

comp C2 : T2;
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val syncs = EcoreUtil2.eAllOfType(result,AnonSVDecl).head?.body?.synchronizations;
		val qiv = EcoreUtil2.eAllOfType(syncs.get(0),QualifInstVal).head;
		val ref = qiv?.value;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));

		val comp = qiv?.comp;
		assertThat(comp.eIsProxy,is(false));
		val origComp = EcoreUtil2.eAllOfType(result,NamedCompDecl).head;
		assertThat(comp,is(origComp));
		val origType = EcoreUtil2.eAllOfType(result,SvDecl).head;
		val origVal = origType.body.transitions.get(0).values.get(1).head;
		assertThat(ref,is(origVal));
	}	

	@Test
	def void testCompValueRefFromType() {
		val result = parseHelper.parse('''
type T = sv(A,B);

comp c : T(
transition:
	C
synchronize:
	C -> A
);
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val syncs = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.body?.synchronizations;
		val qiv = EcoreUtil2.eAllOfType(syncs.get(0),QualifInstVal).head;
		val ref = qiv?.value;
		assertNotNull(ref);
		assertThat(ref.eIsProxy,is(false));

		val t = EcoreUtil2.eAllOfType(result,SvDecl).head;
		val origVal = EcoreUtil2.eAllOfType(t,ValueDecl).filter[v|v.name=='A'].head;
		assertThat(ref,is(origVal));
	}
		
	@Test
	def void testCompValueRefInherited5() {
		val result = parseHelper.parse('''
type T = sv (A,B);

type T1 = sv (
	C
synchronize:
	C -> meets other.A
variable:
	other : T;
);
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val qiv = EcoreUtil2.eAllOfType(sync,QualifInstVal).head;
		val compRef = qiv.comp;
		assertNotNull(compRef);
		assertThat(compRef.eIsProxy,is(false));
		val varDecl = EcoreUtil2.eAllOfType(result,ObjVarDecl).head;
		assertThat(varDecl,is(compRef));
		
		val valRef = qiv.value;
		assertNotNull(valRef);
		assertThat(valRef.eIsProxy,is(false));
		val valDecl = EcoreUtil2.eAllOfType(result,ValueDecl).head;
		assertThat(valDecl,is(valRef));
	}
	
	@Test
	def void testCompValueRefInherited6() {
		val result = parseHelper.parse('''
type T1 = sv (
	A
synchronize:
	A -> meets other.A
variable:
	other : T2;
);

type T2 = sv T1;
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val qiv = EcoreUtil2.eAllOfType(sync,QualifInstVal).head;
		val compRef = qiv.comp;
		assertNotNull(compRef);
		assertThat(compRef.eIsProxy,is(false));
		val varDecl = EcoreUtil2.eAllOfType(result,ObjVarDecl).head;
		assertThat(varDecl,is(compRef));
		
		val valRef = qiv.value;
		assertNotNull(valRef);
		assertThat(valRef.eIsProxy,is(false));
		val valDecl = EcoreUtil2.eAllOfType(result,ValueDecl).head;
		assertThat(valDecl,is(valRef));
	}
	
	
	@Test
	def void testCompValueRefInherited7() {
		val result = parseHelper.parse('''
type T1 = sv (
	A
variable:
	other : T2;
);

type T2 = sv T1(
synchronize:
	A -> (meets other.A; meets var2.A);
variable:
	var2 : T2;
);
''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val sync = EcoreUtil2.eAllOfType(result,Synchronization).head;
		val qiv1 = EcoreUtil2.eAllOfType(sync,QualifInstVal).get(0);
		val qiv2 = EcoreUtil2.eAllOfType(sync,QualifInstVal).get(1);

		val compRef1 = qiv1.comp;
		assertNotNull(compRef1);
		assertThat(compRef1.eIsProxy,is(false));
		val varDecl1 = EcoreUtil2.eAllOfType(result,ObjVarDecl).get(0);
		assertThat(varDecl1,is(compRef1));
		
		val compRef2 = qiv2.comp;
		assertNotNull(compRef2);
		assertThat(compRef2.eIsProxy,is(false));
		val varDecl2 = EcoreUtil2.eAllOfType(result,ObjVarDecl).get(1);
		assertThat(varDecl2,is(compRef2));
		
		val valRef1 = qiv1.value;
		assertNotNull(valRef1);
		assertThat(valRef1.eIsProxy,is(false));
		val valDecl = EcoreUtil2.eAllOfType(result,ValueDecl).head;
		assertThat(valDecl,is(valRef1));
		
		val valRef2 = qiv2.value;
		assertNotNull(valRef2);
		assertThat(valRef2.eIsProxy,is(false));
		assertThat(valDecl,is(valRef2));
	}	

}
