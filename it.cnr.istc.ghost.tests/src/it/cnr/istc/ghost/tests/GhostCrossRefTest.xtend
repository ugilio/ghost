/*
 * generated by Xtext 2.12.0
 */
package it.cnr.istc.ghost.tests

import com.google.inject.Inject
import it.cnr.istc.ghost.ghost.Ghost
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*
import org.eclipse.xtext.EcoreUtil2
import it.cnr.istc.ghost.ghost.QualifInstVal
import it.cnr.istc.ghost.ghost.NamedPar

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostCrossRefTest{

	@Inject
	ParseHelper<Ghost> parseHelper
	
	@Test
	def void testLocalDom() {
		val result = parseHelper.parse('''
type ANumType = int [0,100];

comp ASVWithAnonymousType : sv(
	A(ANumType x) -> B;
	B
synchronize:
	A(x) -> x < 10;
);		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val value = EcoreUtil2.eAllOfType(result,QualifInstVal).head?.value;
		assertNotNull(value);
		assertThat(value.eIsProxy,is(false));
		val par = EcoreUtil2.eAllOfType(result,NamedPar).head;
		assertThat(value,is(par));
	}
}
