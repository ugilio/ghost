/*
 * generated by Xtext 2.10.0
 */
package it.cnr.istc.ghost.tests

import com.google.inject.Inject
import it.cnr.istc.ghost.conversion.NumberValueConverter
import org.eclipse.xtext.conversion.ValueConverterException
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static org.hamcrest.CoreMatchers.*
import static org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostStandaloneNumberConverterTest{

	@Inject
	NumberValueConverter converter;

	@Test
	def void testToValueNoSign() {
		val value = converter.toValue("100",null);
		assertThat(value,is(100L));
	}
	
	@Test
	def void testToValuePositive() {
		val value = converter.toValue("+100",null);
		assertThat(value,is(100L));
	}
	
	@Test
	def void testToValueNegative() {
		val value = converter.toValue("-100",null);
		assertThat(value,is(-100L));
	}
	
	@Test
	def void testToValueZero() {
		val value = converter.toValue("0",null);
		assertThat(value,is(0L));
	}
	
	@Test
	def void testToValuePositiveZero() {
		val value = converter.toValue("+0",null);
		assertThat(value,is(0L));
	}
	
	@Test
	def void testToValueNegativeZero() {
		val value = converter.toValue("-0",null);
		assertThat(value,is(0L));
	}
	
	@Test
	def void testToValueInfinity() {
		val value = converter.toValue("INF",null);
		assertThat(value,is(Long.MAX_VALUE));
	}
	
	@Test
	def void testToValuePositiveInfinity() {
		val value = converter.toValue("+INF",null);
		assertThat(value,is(Long.MAX_VALUE));
	}
	
	@Test
	def void testToValueNegativeInfinity() {
		val value = converter.toValue("-INF",null);
		assertThat(value,is(Long.MIN_VALUE));
	}
	
	@Test
	def void testToValueSpaceSign() {
		val value = converter.toValue("- 100",null);
		assertThat(value,is(-100L));
	}
	
	@Test
	def void testToValuePositiveInfinitySpace() {
		val value = converter.toValue("+ INF",null);
		assertThat(value,is(Long.MAX_VALUE));
	}
	
	@Test
	def void testToValueNegativeInfinitySpace() {
		val value = converter.toValue("- INF",null);
		assertThat(value,is(Long.MIN_VALUE));
	}
	
	@Test(expected = ValueConverterException)
	def void testToValueEmpty() {
		converter.toValue("",null);
	}
	
	@Test(expected = ValueConverterException)
	def void testToValueInvalid() {
		converter.toValue("onehundred",null);
	}
	
	@Test
	def void testToValueSeparator() {
		val value = converter.toValue("100_000",null);
		assertThat(value,is(100000L));
	}
	
	@Test
	def void testToStringPositive() {
		val value = converter.toString(100L);
		assertThat(value,is(equalTo("100")));
	}
	
	@Test
	def void testToStringNegative() {
		val value = converter.toString(-100L);
		assertThat(value,is(equalTo("-100")));
	}
	
	@Test
	def void testToStringPositiveInfinity() {
		val value = converter.toString(Long.MAX_VALUE);
		assertThat(value,is(equalTo("+INF")));
	}
	
	@Test
	def void testToStringNegativeInfinity() {
		val value = converter.toString(Long.MIN_VALUE);
		assertThat(value,is(equalTo("-INF")));
	}
	
}
