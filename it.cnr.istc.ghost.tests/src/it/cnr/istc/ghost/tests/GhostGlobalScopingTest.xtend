/*
 * Copyright (c) 2017 Giulio Bernardi (https://github.com/ugilio/).
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * generated by Xtext 2.12.0
 */
package it.cnr.istc.ghost.tests

import com.google.inject.Inject
import it.cnr.istc.ghost.ghost.Ghost
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*
import org.eclipse.xtext.resource.IResourceServiceProvider
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.emf.ecore.resource.Resource
import java.util.List
import org.eclipse.xtext.EcoreUtil2
import it.cnr.istc.ghost.ghost.NamedCompDecl
import it.cnr.istc.ghost.ghost.ImportDecl

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostGlobalScopingTest{

	@Inject
	ParseHelper<Ghost> parseHelper
	
	@Inject IResourceServiceProvider.Registry rspr
	@Inject IQualifiedNameConverter converter
     
    def void printExportedObjects(Resource resource) {
        for (name : getExportedObjects(resource)) {
            println(name)
        }
    }
    
	def List<String> getExportedObjects(Resource resource) {
		val resServiceProvider = rspr.getResourceServiceProvider(resource.URI)
		val manager = resServiceProvider.getResourceDescriptionManager()
		val description = manager.getResourceDescription(resource)
		return description.exportedObjects.map[eod | converter.toString(eod.qualifiedName)].toList;
    }	

	@Test
	def void testLocalDom() {
		val result = parseHelper.parse('''
domain dom;
type t = sv;
comp c : t;
		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testLocalDomFull() {
		val result = parseHelper.parse('''
domain dom;
type t = sv;
comp c : dom.t;
		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testLocalProb() {
		val result = parseHelper.parse('''
problem prob;
type t = sv;
comp c : t;
		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testLocalProbFull() {
		val result = parseHelper.parse('''
problem prob;
type t = sv;
comp c : prob.t;
		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}

	@Test
	def void testLocalUnnamed() {
		val result = parseHelper.parse('''
type t = sv;
comp c : t;
		''')
		assertNotNull(result);
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testExternalDom() {
		val dom = parseHelper.parse('''
domain dom;
type t = sv;
		''')
		val result = parseHelper.parse('''
import dom;
comp c : t;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testExternalDomFull() {
		val dom = parseHelper.parse('''
domain dom;
type t = sv;
		''')
		val result = parseHelper.parse('''
import dom;
comp c : dom.t;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testNotImportedExternalDom() {
		val dom = parseHelper.parse('''
domain dom;
type t = sv;
		''')
		val result = parseHelper.parse('''
comp c : dom.t;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(true));
	}
	
	@Test
	def void testExternalProb() {
		val dom = parseHelper.parse('''
problem prob;
type t = sv;
		''')
		val result = parseHelper.parse('''
import prob;
comp c : t;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(true));
	}
	
	@Test
	def void testExternalProbFull() {
		val dom = parseHelper.parse('''
problem prob;
type t = sv;
		''')
		val result = parseHelper.parse('''
import prob;
comp c : prob.t;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(true));
	}	

	@Test
	def void testNotImportedExternalProb() {
		val dom = parseHelper.parse('''
problem prob;
type t = sv;
		''')
		val result = parseHelper.parse('''
comp c : prob.t;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(true));
	}
	
	@Test
	def void testImportReference() {
		val dom = parseHelper.parse('''
domain dom;
		''')
		val result = parseHelper.parse('''
import dom;
		''', dom.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val impDom = EcoreUtil2.eAllOfType(result,ImportDecl).head?.importedNamespace;
		assertNotNull(impDom);
		assertThat(impDom,is(dom.domain));
	}

	@Test
	def void testIndirectImport1() {
		val dom1 = parseHelper.parse('''
domain dom1;
type t1 = sv;
		''')
		val dom2 = parseHelper.parse('''
domain dom2;
import dom1;
type t2 = sv t1;
		''', dom1.eResource.resourceSet);
		val result = parseHelper.parse('''
import dom2;
comp c : t1;
		''', dom2.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(true));
	}
	
	@Test
	def void testIndirectImport2() {
		val dom1 = parseHelper.parse('''
domain dom1;
type t1 = sv;
		''')
		val dom2 = parseHelper.parse('''
domain dom2;
import dom1;
type t2 = sv t1;
		''', dom1.eResource.resourceSet);
		val result = parseHelper.parse('''
import dom2;
comp c : t2;
		''', dom2.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
	
	@Test
	def void testIndirectImport3() {
		val dom1 = parseHelper.parse('''
domain dom1;
type t1 = sv;
		''')
		val dom2 = parseHelper.parse('''
domain dom2;
import dom1;
type t2 = sv t1;
		''', dom1.eResource.resourceSet);
		val result = parseHelper.parse('''
import dom1;
import dom2;
comp c : t1;
		''', dom2.eResource.resourceSet);
		
		EcoreUtil2.resolveAll(result);
		val type = EcoreUtil2.eAllOfType(result,NamedCompDecl).head?.type;
		assertNotNull(type);
		assertThat(type.eIsProxy,is(false));
	}
}
