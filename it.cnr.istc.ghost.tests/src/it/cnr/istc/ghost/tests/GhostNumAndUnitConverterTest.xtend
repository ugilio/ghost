/*
 * generated by Xtext 2.10.0
 */
package it.cnr.istc.ghost.tests

import com.google.inject.Inject
import it.cnr.istc.ghost.ghost.Ghost
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static org.hamcrest.CoreMatchers.*
import org.eclipse.xtext.EcoreUtil2
import it.cnr.istc.ghost.ghost.Interval
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import it.cnr.istc.ghost.ghost.GhostPackage
import org.eclipse.xtext.conversion.ValueConverterException
import it.cnr.istc.ghost.conversion.NumAndUnitValueConverter

@RunWith(XtextRunner)
@InjectWith(GhostInjectorProvider)
class GhostNumAndUnitConverterTest{

	@Inject
	ParseHelper<Ghost> parseHelper
	
	@Inject
	NumAndUnitValueConverter converter;

	@Test
	def void testToValue1() {
		val result = parseHelper.parse('''
type test = int 100 ms;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val node = NodeModelUtils.findNodesForFeature(intv,GhostPackage.Literals.INTERVAL__LBUB).head;
		val value = converter.toValue(intv.lbub,node);
		assertThat(value,is(100L));
	}
	
	@Test
	def void testToValue2() {
		val result = parseHelper.parse('''
type test = int 100 s;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val node = NodeModelUtils.findNodesForFeature(intv,GhostPackage.Literals.INTERVAL__LBUB).head;
		val value = converter.toValue(intv.lbub,node);
		assertThat(value,is(100_000L));
	}
	
	@Test
	def void testToValuePosInf() {
		val result = parseHelper.parse('''
type test = int INF s;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val node = NodeModelUtils.findNodesForFeature(intv,GhostPackage.Literals.INTERVAL__LBUB).head;
		val value = converter.toValue(intv.lbub,node);
		assertThat(value,is(equalTo(Long.MAX_VALUE)));
	}
	
	@Test
	def void testToValueNegInf() {
		val result = parseHelper.parse('''
type test = int -INF s;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val node = NodeModelUtils.findNodesForFeature(intv,GhostPackage.Literals.INTERVAL__LBUB).head;
		val value = converter.toValue(intv.lbub,node);
		assertThat(value,is(equalTo(Long.MIN_VALUE)));
	}
	
	@Test(expected = ValueConverterException)
	def void testInvalidUnit() {
		val result = parseHelper.parse('''
type test = int 10 bananas;
		''')
		val intv = EcoreUtil2.eAllOfType(result,Interval).head;
		val node = NodeModelUtils.findNodesForFeature(intv,GhostPackage.Literals.INTERVAL__LBUB).head;
		converter.toValue(intv.lbub,node);
	}
	
	@Test
	def void testToStringPositive() {
		val value = converter.toString(100L);
		assertThat(value,is(equalTo("100")));
	}
	
	
	
}
