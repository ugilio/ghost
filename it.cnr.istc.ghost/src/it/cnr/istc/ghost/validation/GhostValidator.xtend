/*
 * generated by Xtext 2.10.0
 */
package it.cnr.istc.ghost.validation

import org.eclipse.xtext.validation.Check
import it.cnr.istc.ghost.ghost.SvDecl
import it.cnr.istc.ghost.ghost.GhostPackage
import java.util.HashSet
import it.cnr.istc.ghost.ghost.ResourceDecl
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GhostValidator extends AbstractGhostValidator {
	
	public static val CYCLIC_HIERARCHY = 'cyclicHierarchy'

	// Checks for type hierarchy

	private def dispatch EObject getParent(SvDecl decl) {
		return decl.parent;
	}

	private def dispatch EObject getParent(ResourceDecl decl) {
		return decl.parent;
	}
	
	private def dispatch EObject getParent(Object o) {
		return null;
	}
	
	protected def checkHierarcyCycles(EObject decl, EReference feature) {
		val visited = new HashSet<EObject>();
		var tmp = decl;
		visited.add(tmp);
		while (getParent(tmp)!=null) {
			tmp = getParent(tmp);
			if (visited.contains(tmp)) {
				error('Cyclic dependency in type hierarchy', 
						feature,
						it.cnr.istc.ghost.validation.GhostValidator.CYCLIC_HIERARCHY)
				return;
			}
			visited.add(tmp);
		}
	}
		
	@Check
	def checkSVHierarcyCycles(SvDecl decl) {
		checkHierarcyCycles(decl,GhostPackage.Literals.SV_DECL__PARENT);
	}
	
	@Check
	def checkResHierarcyCycles(ResourceDecl decl) {
		checkHierarcyCycles(decl,GhostPackage.Literals.RESOURCE_DECL__PARENT);
	}
}
